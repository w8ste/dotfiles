#+TITLE: w8stes's GNU Emacs Config
#+AUTHOR: w8ste
#+STARTUP: showerverything
#+OPTIONS: toc:2
* TABLE OF CONTENTS :toc:
- [[#important-programs][Important programs]]
  - [[#load-elpaca][Load Elpaca]]
  - [[#load-evil-mode][Load Evil Mode]]
  - [[#general-keybindings][General Keybindings]]
- [[#all-the-icons][All the icons]]
- [[#auctex][AUCTex]]
- [[#autopair][Autopair]]
- [[#buffer-move][Buffer-Move]]
- [[#dashboard][Dashboard]]
- [[#diminish][Diminish]]
- [[#dired][Dired]]
- [[#disord-status][Disord status]]
- [[#fonts][FONTS]]
  - [[#settings-the-font-face][Settings The Font Face]]
- [[#flycheck][Flycheck]]
- [[#gui-settings][GUI Settings]]
  - [[#disable-menubar-toolbars-and-scrollbars][Disable Menubar, Toolbars and Scrollbars]]
  - [[#display-line-numbers-and-truncated-lines][Display Line Numbers and truncated Lines]]
- [[#highlight-indents][Highlight Indents]]
- [[#highlight-todo][Highlight TODO]]
- [[#ivy-counsel][IVY (Counsel)]]
- [[#language-support][Language Support]]
  - [[#lsp-mode][Lsp mode]]
  - [[#corfu][Corfu]]
  - [[#java][Java]]
- [[#modeline][Modeline]]
- [[#neotree][Neotree]]
- [[#org-mode][Org Mode]]
  - [[#enable-toc][Enable ToC]]
  - [[#enable-bullet-points][Enable bullet points]]
  - [[#disable-electric-indent][Disable electric indent]]
- [[#projectile][Projectile]]
- [[#rainbow-mode][Rainbow mode]]
- [[#shells-and-terminals][Shells and Terminals]]
  - [[#eshell][Eshell]]
  - [[#vterm][Vterm]]
  - [[#vterm-toggle][Vterm-toggle]]
- [[#sudo-edit][Sudo Edit]]
- [[#theme][Theme]]
- [[#transparency][Transparency]]
- [[#treesitter][Treesitter]]
- [[#which-key][WHICH-KEY]]

* Important programs
** Load Elpaca
#+begin_src emacs-lisp
  (defvar elpaca-installer-version 0.5)
  (defvar elpaca-directory (expand-file-name "elpaca/" user-emacs-directory))
  (defvar elpaca-builds-directory (expand-file-name "builds/" elpaca-directory))
  (defvar elpaca-repos-directory (expand-file-name "repos/" elpaca-directory))
  (defvar elpaca-order '(elpaca :repo "https://github.com/progfolio/elpaca.git"
                                :ref nil
                                :files (:defaults (:exclude "extensions"))
                                :build (:not elpaca--activate-package)))
  (let* ((repo  (expand-file-name "elpaca/" elpaca-repos-directory))
         (build (expand-file-name "elpaca/" elpaca-builds-directory))
         (order (cdr elpaca-order))
         (default-directory repo))
    (add-to-list 'load-path (if (file-exists-p build) build repo))
    (unless (file-exists-p repo)
      (make-directory repo t)
      (when (< emacs-major-version 28) (require 'subr-x))
      (condition-case-unless-debug err
          (if-let ((buffer (pop-to-buffer-same-window "*elpaca-bootstrap*"))
                   ((zerop (call-process "git" nil buffer t "clone"
                                         (plist-get order :repo) repo)))
                   ((zerop (call-process "git" nil buffer t "checkout"
                                         (or (plist-get order :ref) "--"))))
                   (emacs (concat invocation-directory invocation-name))
                   ((zerop (call-process emacs nil buffer nil "-Q" "-L" "." "--batch"
                                         "--eval" "(byte-recompile-directory \".\" 0 'force)")))
                   ((require 'elpaca))
                   ((elpaca-generate-autoloads "elpaca" repo)))
              (progn (message "%s" (buffer-string)) (kill-buffer buffer))
            (error "%s" (with-current-buffer buffer (buffer-string))))
        ((error) (warn "%s" err) (delete-directory repo 'recursive))))
    (unless (require 'elpaca-autoloads nil t)
      (require 'elpaca)
      (elpaca-generate-autoloads "elpaca" repo)
      (load "./elpaca-autoloads")))
  (add-hook 'after-init-hook #'elpaca-process-queues)
  (elpaca `(,@elpaca-order))
  ;; Install use-package support
  (elpaca elpaca-use-package
    ;; Enable :elpaca use-package keyword.
    (elpaca-use-package-mode)
    ;; Assume :elpaca t unless otherwise specified.
      (setq elpaca-use-package-by-default t))

    ;; Block until current queue processed.
    (elpaca-wait)

    ;;When installing a package which modifies a form used at the top-level
    ;;(e.g. a package which adds a use-package key word),
    ;;use `elpaca-wait' to block until that package has been installed/configured.
    ;;For example:
    ;;(USE-package general :demand t)
    ;;(elpaca-wait)
    ;;Turns off elpaca-use-package-mode current declartion
    ;;Note this will cause the declaration to be interpreted immediately (not deferred).
    ;;Useful for configuring built-in emacs features.
    (use-package emacs :elpaca nil :config (setq ring-bell-function #'ignore))

    ;; Don't install anything. Defer execution of BODY
    ;;(elpaca nil (message "deferred"))

#+end_src

** Load Evil Mode
#+begin_src emacs-lisp
  (use-package evil
    :bind (:map evil-insert-state-map ("C-k" . nil)) 
    :init
    (setq evil-want-integration t)
    (setq evil-want-keybinding nil)
    (setq evil-vsplit-window-right t)
    (setq evil-split-window-below t)
    (evil-mode))
  (use-package evil-collection
    :after evil
    :config
    (setq evil-collection-mode-list '(dashboard dired ibuffer))
    (evil-collection-init))

  ;; settings keybindings for evil
  (with-eval-after-load 'evil-maps
  (define-key evil-motion-state-map (kbd "SPC") nil)
  (define-key evil-motion-state-map (kbd "RET") nil)
  (define-key evil-visual-state-map (kbd "C-c") 'evil-normal-state)
  (define-key evil-insert-state-map (kbd "C-c") 'evil-normal-state)
  (define-key evil-motion-state-map (kbd "C-e") nil)
  (define-key evil-visual-state-map (kbd "C-c") 'evil-exit-visual-state)
  (define-key evil-motion-state-map (kbd "TAB") nil))
#+end_src

** General Keybindings
#+begin_src emacs-lisp
    (keymap-global-set "C-c k" 'kill-line)
    (use-package general
      :config
      (general-evil-setup)
      ;; set up 'SPC' as the global leader key
      (general-create-definer w8ste/leader-keys
        :states '(normal insert visual emacs)
        :keymaps 'override
        :prefix "SPC" ;; set leader
        :global-prefix "M-SPC") ;; access leader in insert mode

      ;; buffer keybindings
      (w8ste/leader-keys
        "b" '(:ignore t :wk "Bookmarks/Buffer")
        "bb" '(switch-to-buffer :wk "Switch buffer")
        "bk" '(kill-this-buffer :wk "Kill this buffer")
        "bi" '(ibuffer :wk "Ibuffer")
        "bn" '(next-buffer :wk "Next buffer")
        "bp" '(previous-buffer :wk "Previous buffer")
        "br" '(revert-buffer :wk "Reload buffer")
        "b R" '(rename-buffer :wk "Rename buffer")
        "b s" '(basic-save-buffer :wk "Save buffer")
        "b S" '(save-some-buffers :wk "Save multiple buffers") 
        ;; Bookmarks
        "b d" '(bookmark-delete :wk "Delete bookmark")
        "b l" '(list-bookmarks :wk "List bookmarks")
        "b m" '(bookmark-set :wk "Set bookmark"))

      ;; quality of life keybindings
      (w8ste/leader-keys
        "f c" '((lambda () (interactive) (find-file "~/.config/emacs/config.org")) :wk "Edit emacs config")
        "fr" '(counsel-recentf :wk "Find recent files")
        "pf" '(projectile-find-file :wk "Find file in current project")
        "TAB TAB" '(comment-line :wk "Comment lines"))

      ;; eval keybindings
      (w8ste/leader-keys
        "e" '(:ignore t :wk "Evaluate/Eshell")    
        "e b" '(eval-buffer :wk "Evaluate elisp in buffer")
        "e d" '(eval-defun :wk "Evaluate defun containing or after point")
        "e e" '(eval-expression :wk "Evaluate and elisp expression")
        "e l" '(eval-last-sexp :wk "Evaluate elisp expression before point")
        "e r" '(eval-region :wk "Evaluate elisp in region")
        "es" '(eshell :wk "Eshell")
        "eh" '(counsel-esh-history :wk "Eshell history"))

      ;; Dired
      (w8ste/leader-keys
        "d" '(:ignore t :wk "Dired")
        "d d" '(dired :wk "Open dired")
        "d j" '(dired-jump :wk "Dired jump to current")
        "d n" '(neotree-dir :wk "Open directory in neotree")
        "d p" '(peep-dired :wk "Peep-dired")) 

      ;; Help keybindigs
      (w8ste/leader-keys
        "h" '(:ignore t :wk "Help")
        "h a" '(counsel-apropos :wk "Apropos")
        "h b" '(describe-bindings :wk "Describe bindings")
        "h c" '(describe-char :wk "Describe character under cursor")
        "h d" '(:ignore t :wk "Emacs documentation")
        "h d a" '(about-emacs :wk "About Emacs")
        "h d d" '(view-emacs-debugging :wk "View Emacs debugging")
        "h d f" '(view-emacs-FAQ :wk "View Emacs FAQ")
        "h d m" '(info-emacs-manual :wk "The Emacs manual")
        "h d n" '(view-emacs-news :wk "View Emacs news")
        "h d o" '(describe-distribution :wk "How to obtain Emacs")
        "h d p" '(view-emacs-problems :wk "View Emacs problems")
        "h d t" '(view-emacs-todo :wk "View Emacs todo")
        "h d w" '(describe-no-warranty :wk "Describe no warranty")
        "h e" '(view-echo-area-messages :wk "View echo area messages")
        "h f" '(describe-function :wk "Describe function")
        "h F" '(describe-face :wk "Describe face")
        "h g" '(describe-gnu-project :wk "Describe GNU Project")
        "h i" '(info :wk "Info")
        "h I" '(describe-input-method :wk "Describe input method")
        "h k" '(describe-key :wk "Describe key")
        "h l" '(view-lossage :wk "Display recent keystrokes and the commands run")
        "h L" '(describe-language-environment :wk "Describe language environment")
        "h m" '(describe-mode :wk "Describe mode")
        "h r" '(:ignore t :wk "Reload")
        "h r r" '((lambda () (interactive)
                    (load-file "~/.config/emacs/init.el")
                    (ignore (elpaca-process-queues)))
                  :wk "Reload emacs config")
        "h t" '(load-theme :wk "Load theme")
        "h v" '(describe-variable :wk "Describe variable")
        "h w" '(where-is :wk "Prints keybinding for command if set")
        "h x" '(describe-command :wk "Display full documentation for command"))

      ;; Keybindings for splits
      (w8ste/leader-keys
        "w" '(:ignore t :wk "Windows")
        ;; Window splits
        "w c" '(evil-window-delete :wk "Close window")
        "w n" '(evil-window-new :wk "New window")
        "w s" '(evil-window-split :wk "Horizontal split window")
        "w v" '(evil-window-vsplit :wk "Vertical split window")
        ;; Window motions
        "w h" '(evil-window-left :wk "Window left")
        "w j" '(evil-window-down :wk "Window down")
        "w k" '(evil-window-up :wk "Window up")
        "w l" '(evil-window-right :wk "Window right")
        "w w" '(evil-window-next :wk "Goto next window")
        ;; Move Windows
        "w H" '(buf-move-left :wk "Buffer move left")
        "w J" '(buf-move-down :wk "Buffer move down")
        "w K" '(buf-move-up :wk "Buffer move up")
        "w L" '(buf-move-right :wk "Buffer move right"))

      (w8ste/leader-keys
        "m" '(:ignore t :wk "Org")
        "m a" '(org-agenda :wk "Org agenda")
        "m e" '(org-export-dispatch :wk "Org export dispatch")
        "m i" '(org-toggle-item :wk "Org toggle item")
        "m t" '(org-todo :wk "Org todo")
        "m B" '(org-babel-tangle :wk "Org babel tangle")
        "m T" '(org-todo-list :wk "Org todo list"))

      (w8ste/leader-keys
        "m d" '(:ignore t :wk "Date/deadline")
        "m d t" '(org-time-stamp :wk "Org time stamp"))

      (w8ste/leader-keys
        "m b" '(:ignore t :wk "Tables")
        "m b -" '(org-table-insert-hline :wk "Insert hline in table")) 

      (w8ste/leader-keys
        "t" '(:ignore t :wk "Toggle")
        "t l" '(display-line-numbers-mode :wk "Toggle line numbers")
        "t t" '(visual-line-mode :wk "Toggle truncated lines")
        "tv" '(vterm-toggle :wk "Toggle vterm"))

      ;; NeoTree
      (w8ste/leader-keys
        "n" '(:ignore t :wk "Neotree")
        "nt" '(neotree-toggle :wk "Toggle Neotree")
        "nc" '(neotree-create-node :wk "Create File")
        "nd" '(neotree-delete-node :wk "Delete File"))
      )
    ;; Setting RETURN key in org-mode to follow links
    (setq org-return-follows-link  t)
#+end_src

* All the icons
#+begin_src emacs-lisp
  (use-package all-the-icons
    :ensure t
    :if (display-graphic-p))

  (use-package all-the-icons-dired
    :hook (dired-mode . (lambda () (all-the-icons-dired-mode t))))
#+end_src

* AUCTex
#+begin_src emacs-lisp
(use-package auctex
  :ensure t
  :defer t
  :hook (LaTeX-mode . (lambda ()
			(push (list 'output-pdf "Zathura")
			      TeX-view-program-selection))))
#+end_src

* Autopair
#+begin_src emacs-lisp
      (use-package smartparens
        :init
        (smartparens-global-mode))
#+end_src

* Buffer-Move
#+begin_src emacs-lisp
 (require 'windmove)

;;;###autoload
(defun buf-move-up ()
  "Swap the current buffer and the buffer above the split.
If there is no split, ie now window above the current one, an
error is signaled."
;;  "Switches between the current buffer, and the buffer above the
;;  split, if possible."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'up))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No window above this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-down ()
"Swap the current buffer and the buffer under the split.
If there is no split, ie now window under the current one, an
error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'down))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (or (null other-win) 
            (string-match "^ \\*Minibuf" (buffer-name (window-buffer other-win))))
        (error "No window under this one")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-left ()
"Swap the current buffer and the buffer on the left of the split.
If there is no split, ie now window on the left of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'left))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No left split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win))))

;;;###autoload
(defun buf-move-right ()
"Swap the current buffer and the buffer on the right of the split.
If there is no split, ie now window on the right of the current
one, an error is signaled."
  (interactive)
  (let* ((other-win (windmove-find-other-window 'right))
	 (buf-this-buf (window-buffer (selected-window))))
    (if (null other-win)
        (error "No right split")
      ;; swap top with this one
      (set-window-buffer (selected-window) (window-buffer other-win))
      ;; move this one to top
      (set-window-buffer other-win buf-this-buf)
      (select-window other-win)))) 
#+end_src

* Dashboard
#+begin_src emacs-lisp
(use-package dashboard
  :ensure t 
  :init
  (setq initial-buffer-choice 'dashboard-open)
  (setq dashboard-set-heading-icons t)
  (setq dashboard-set-file-icons t)
  (setq dashboard-banner-logo-title "Emacs Is More Than A Text Editor!")
  ;;(setq dashboard-startup-banner 'logo) ;; use standard emacs logo as banner
  (setq dashboard-startup-banner "~/.config/emacs/images/emacs-dash.png")  ;; use custom image as banner
  (setq dashboard-center-content t) ;; set to 't' for centered content
  (setq dashboard-items '((recents . 5)
                          (agenda . 5 )
                          (bookmarks . 3)
                          (projects . 3)
                          (registers . 3)))
  :custom
  (dashboard-modify-heading-icons '((recents . "file-text")
                                    (bookmarks . "book")))
  :config
  (dashboard-setup-startup-hook))
#+end_src

* Diminish
Option that implements hiding of minor-modes in the modeline
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

* Dired
#+begin_src emacs-lisp
 (use-package dired-open
  :config
  (setq dired-open-extensions '(("gif" . "sxiv")
                                ("jpg" . "sxiv")
                                ("png" . "sxiv")
                                ("mkv" . "mpv")
                                ("mp4" . "mpv"))))

(use-package peep-dired
  :after dired
  :hook (evil-normalize-keymaps . peep-dired-hook)
  :config
    (evil-define-key 'normal dired-mode-map (kbd "h") 'dired-up-directory)
    (evil-define-key 'normal dired-mode-map (kbd "l") 'dired-open-file) ; use dired-find-file instead if not using dired-open package
    (evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file)
    (evil-define-key 'normal peep-dired-mode-map (kbd "k") 'peep-dired-prev-file)
)
#+end_src

* Disord status
#+begin_src emacs-lisp
  (use-package elcord
    :init
    (elcord-mode))
#+end_src

* FONTS
** Settings The Font Face
#+begin_src emacs-lisp
  (set-frame-font "JetBrains Mono Medium 19")
  (set-face-attribute 'default nil
    :font "JetBrains Mono Medium"
    :height 110
    :weight 'medium)
  (set-face-attribute 'variable-pitch nil
    :font "JetBrains Mono Medium"
    :height 120
    :weight 'medium)
  (set-face-attribute 'fixed-pitch nil
    :font "JetBrains Mono Medium"
    :height 110
    :weight 'medium)
  ;; Makes commented text and keywords italics.
  ;; This is working in emacsclient but not emacs.
  ;; Your font must have an italic face available.
  (set-face-attribute 'font-lock-comment-face nil
    :slant 'italic)
  (set-face-attribute 'font-lock-keyword-face nil
    :slant 'italic)

  ;; This sets the default font on all graphical frames created after restarting Emacs.
  ;; Does the same thing as 'set-face-attribute default' above, but emacsclient fonts
  ;; are not right unless I also add this method of setting the default font.
  (add-to-list 'default-frame-alist '(font . "JetBrains Mono Medium 12"))

  ;; Uncomment the following line if line spacing needs adjusting.
  (setq-default line-spacing 0.12)
#+end_src

* Flycheck
#+begin_src emacs-lisp
 (use-package flycheck
  :ensure t
  :defer t
  :diminish
  :init (global-flycheck-mode)) 
#+end_src

* GUI Settings
** Disable Menubar, Toolbars and Scrollbars
#+begin_src emacs-lisp
  (menu-bar-mode -1)
  (tool-bar-mode -1)
  (scroll-bar-mode -1)
#+end_src

** Display Line Numbers and truncated Lines
#+begin_src emacs-lisp
    (global-display-line-numbers-mode 1)
    (setq display-line-numbers-type 'relative)
    (global-visual-line-mode t)
#+end_src

* Highlight Indents
#+begin_src emacs-lisp
  (use-package highlight-indent-guides
    :config
    (set-face-background 'highlight-indent-guides-odd-face "darkgray")
    (set-face-background 'highlight-indent-guides-even-face "dimgray")
    (set-face-foreground 'highlight-indent-guides-character-face "dimgray")
    (add-hook 'c++-mode-hook 'highlight-indent-guides-mode)
    (add-hook 'java-mode-hook 'highlight-indent-guides-mode)
    (add-hook 'prog-mode-hook 'highlight-indent-guides-mode))

#+end_src

* Highlight TODO
#+begin_src emacs-lisp
(use-package hl-todo
  :hook ((org-mode . hl-todo-mode)
         (prog-mode . hl-todo-mode))
  :config
  (setq hl-todo-highlight-punctuation ":"
        hl-todo-keyword-faces
        `(("TODO"       warning bold)
          ("FIXME"      error bold)
          ("HACK"       font-lock-constant-face bold)
          ("REVIEW"     font-lock-keyword-face bold)
          ("NOTE"       success bold)
          ("DEPRECATED" font-lock-doc-face bold))))
#+end_src

* IVY (Counsel)
#+begin_src emacs-lisp
  (use-package counsel
    :after ivy
    :diminish
    :config (counsel-mode))

  (use-package ivy
    :diminish
    :bind
    ;; ivy-resume resumes the last Ivy-based completion.
    (("C-c C-r" . ivy-resume)
     ("C-x B" . ivy-switch-buffer-other-window))
    :custom
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (setq enable-recursive-minibuffers t)
    :config
    (ivy-mode))

  (use-package all-the-icons-ivy-rich
    :ensure t
    :init (all-the-icons-ivy-rich-mode 1))

  (use-package ivy-rich
    :after ivy
    :ensure t
    :init (ivy-rich-mode 1) ;; this gets us descriptions in M-x.
    :custom
    (ivy-virtual-abbreviate 'full
                            ivy-rich-switch-buffer-align-virtual-buffer t
                            ivy-rich-path-style 'abbrev)
    :config
    (ivy-set-display-transformer 'ivy-switch-buffer
                                 'ivy-rich-switch-buffer-transformer))
    #+end_src

* Language Support
** Lsp mode
#+begin_src emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :hook (lsp-after-apply-edits-hook t)
    :config
    (add-hook 'c++-mode-hook 'lsp)
    (add-hook 'java-mode-hook 'lsp)
    '(lsp-enable-whichkey-integration t)
    (lsp))

  (use-package lsp-ui
    :init
    (setq lsp-ui-sideline-enable t)
    (setq lsp-ui-sideline-show-hover nil)
    (setq lsp-ui-doc-position 'bottom))

#+end_src

** Corfu
#+begin_src emacs-lisp
   (use-package corfu
     ;; Optional customizations
     :custom
     (corfu-cycle t)                 ; Allows cycling through candidates
     (corfu-auto t)                  ; Enable auto completion
     (corfu-auto-prefix 2)
     (corfu-auto-delay 0.0)
     (corfu-popupinfo-delay 0.0)
     (corfu-preview-current 'insert) ; Do not preview current candidate
     (corfu-preselect 'prompt)
     (corfu-on-exact-match nil)      ; Don't auto expand tempel snippets

     ;; Optionally use TAB for cycling, default is `corfu-complete'.
     :bind (:map corfu-map
                 ("M-SPC"      . corfu-insert-separator)
                 ("C-j"        . corfu-next)
                 ([tab]        . corfu-next)
                 ("C-k"      . corfu-previous)
                 ("C-z" . corfu-insert)
                 ("C-ü" . corfu-popupinfo-documentation)
                 ("RET"        . nil))

     :init
     (global-corfu-mode)
     (corfu-history-mode)
      (setq corfu-popupinfo-delay 0.2)
     (corfu-popupinfo-mode) ; Popup completion info
     :config
     (add-hook 'eshell-mode-hook
               (lambda () (setq-local corfu-quit-at-boundary t
                                 corfu-quit-no-match t
                                 corfu-auto nil)
                 (corfu-mode))))

  (use-package kind-icon
   :after corfu
   :custom
   (kind-icon-use-icons t)
   (kind-icon-default-face 'corfu-default) ; Have background color be the same as `corfu' face background
   (kind-icon-blend-background nil)  ; Use midpoint color between foreground and background colors ("blended")?
   (kind-icon-blend-frac 0.08)
   ;;(svg-lib-icons-dir (no-littering-expand-var-file-name "svg-lib/cache/")) ; Change cache dir
   :config
   (add-to-list 'corfu-margin-formatters #'kind-icon-margin-formatter) ; Enable `kind-icon'
   (add-hook 'kb/themes-hooks #'(lambda () (interactive) (kind-icon-reset-cache))))
#+end_src

** Java
#+begin_src emacs-lisp
      (use-package lsp-java
        :hook (java-mode . lsp-deferred))
#+end_src

* Modeline
#+begin_src emacs-lisp
(use-package doom-modeline
  :ensure t
  :init (doom-modeline-mode 1)
  :config
  (setq doom-modeline-height 35      ;; sets modeline height
        doom-modeline-bar-width 5    ;; sets right bar width
        doom-modeline-persp-name t   ;; adds perspective name to modeline
        doom-modeline-persp-icon t)) ;; adds folder icon next to persp name
#+end_src

* Neotree
#+begin_src emacs-lisp
  (use-package neotree
    :config
    (setq neo-smart-open t
          neo-show-hidden-files t
          neo-window-width 37
          neo-window-fixed-size nil
          inhibit-compacting-font-caches t
          projectile-switch-project-action 'neotree-projectile-action) 
    ;; truncate long file names in neotree
    (add-hook 'neo-after-create-hook
              #'(lambda (_)
                  (with-current-buffer (get-buffer neo-buffer-name)
                    (setq truncate-lines t)
                    (setq word-wrap nil)
                    (make-local-variable 'auto-hscroll-mode)
                    (setq auto-hscroll-mode nil)))))
#+end_src

* Org Mode
** Enable ToC
#+begin_src emacs-lisp
  (use-package toc-org
    :commands toc-org-enable
    :init (add-hook 'org-mode-hook 'toc-org-enable))
#+end_src

** Enable bullet points
#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'org-indent-mode)
(use-package org-bullets)
(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
#+end_src

** Disable electric indent
#+begin_src emacs_lisp
(electric-indent-mode -1)
(setq org-edit-src-content-indention 1)
#+end_src

#+begin_src emacs-lisp
  (require 'org-tempo)
#+end_src

* Projectile
Projectile is a project interaction library for Emacs.
#+begin_src emacs-lisp
  (use-package projectile
    :diminish
    :config
    (projectile-mode +1)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)) 
#+end_src

* Rainbow mode
#+begin_src emacs-lisp
(use-package rainbow-mode
  :diminish
  :hook 
  ((org-mode prog-mode) . rainbow-mode))
#+end_src

* Shells and Terminals
** Eshell
Shell written in emacs-lisp
#+begin_src emacs-lisp
(use-package eshell-syntax-highlighting
  :after esh-mode
  :config
  (eshell-syntax-highlighting-global-mode +1))

;; eshell-syntax-highlighting -- adds fish/zsh-like syntax highlighting.
;; eshell-rc-script -- your profile for eshell; like a bashrc for eshell.
;; eshell-aliases-file -- sets an aliases file for the eshell.
  
(setq eshell-rc-script (concat user-emacs-directory "eshell/profile")
      eshell-aliases-file (concat user-emacs-directory "eshell/aliases")
      eshell-history-size 5000
      eshell-buffer-maximum-lines 5000
      eshell-hist-ignoredups t
      eshell-scroll-to-bottom-on-input t
      eshell-destroy-buffer-when-process-dies t
      eshell-visual-commands'("bash" "fish" "htop" "ssh" "top" "zsh"))
#+end_src
** Vterm
Terminal emulator in emacs
#+begin_src emacs-lisp
(use-package vterm
:config
(setq shell-file-name "/bin/fish"
      vterm-max-scrollback 5000))
#+end_src
** Vterm-toggle
Helps toggling vterm
#+begin_src emacs-lisp
(use-package vterm-toggle
  :after vterm
  :config
  (setq vterm-toggle-fullscreen-p nil)
  (setq vterm-toggle-scope 'project)
  (add-to-list 'display-buffer-alist
               '((lambda (buffer-or-name _)
                     (let ((buffer (get-buffer buffer-or-name)))
                       (with-current-buffer buffer
                         (or (equal major-mode 'vterm-mode)
                             (string-prefix-p vterm-buffer-name (buffer-name buffer))))))
                  (display-buffer-reuse-window display-buffer-at-bottom)
                  ;;(display-buffer-reuse-window display-buffer-in-direction)
                  ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                  ;;(direction . bottom)
                  ;;(dedicated . t) ;dedicated is supported in emacs27
                  (reusable-frames . visible)
                  (window-height . 0.3))))
#+end_src
* Sudo Edit
#+begin_src emacs-lisp
  (use-package sudo-edit
    :config
    (w8ste/leader-keys
      "fu" '(sudo-edit-find-file :wk "Sudo find file")
      "fU" '(sudo-edit :wk "Sudo edit file")))
#+end_src

* Theme
#+begin_src emacs-lisp
(use-package doom-themes
  :ensure t
  :config
  ;; Global settings (defaults)
  (setq doom-themes-enable-bold t    ; if nil, bold is universally disabled
        doom-themes-enable-italic t) ; if nil, italics is universally disabled
  (load-theme 'doom-tokyo-night t)

  ;; Enable flashing mode-line on errors
  (doom-themes-visual-bell-config)
  ;; Enable custom neotree theme (all-the-icons must be installed!)
  (doom-themes-neotree-config)
  ;; or for treemacs users
  (setq doom-themes-treemacs-theme "doom-atom") ; use "doom-colors" for less minimal icon theme
  (doom-themes-treemacs-config)
  ;; Corrects (and improves) org-mode's native fontification.
  (doom-themes-org-config))
#+end_src

* Transparency
#+begin_src emacs-lisp
  (add-to-list 'default-frame-alist '(alpha-background . 90))
#+end_src

* Treesitter
#+begin_src emacs-lisp
  (use-package tree-sitter
    :init
    (global-tree-sitter-mode)
    (add-hook 'tree-sitter-after-on-hook #'tree-sitter-hl-mode))
    (use-package tree-sitter-langs)
#+end_src

* WHICH-KEY
#+begin_src emacs-lisp
  (use-package which-key
  :init
    (which-key-mode 1)
  :config
  (setq which-key-side-window-location 'bottom
	  which-key-sort-order #'which-key-key-order-alpha
	  which-key-sort-uppercase-first nil
	  which-key-add-column-padding 1
	  which-key-max-display-columns nil
	  which-key-min-display-lines 6
	  which-key-side-window-slot -10
	  which-key-side-window-max-height 0.25
	  which-key-idle-delay 0.8
	  which-key-max-description-length 25
	  which-key-allow-imprecise-window-fit nil 
	  which-key-separator " → " ))
#+end_src
